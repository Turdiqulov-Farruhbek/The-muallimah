// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: muallimah-submodule/protos/users_course.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserCourseService_EnrollUserInCourse_FullMethodName = "/protos.UserCourseService/EnrollUserInCourse"
	UserCourseService_GetUserCourse_FullMethodName      = "/protos.UserCourseService/GetUserCourse"
	UserCourseService_UpdateUserCourse_FullMethodName   = "/protos.UserCourseService/UpdateUserCourse"
	UserCourseService_DeleteUserCourse_FullMethodName   = "/protos.UserCourseService/DeleteUserCourse"
	UserCourseService_ListUserCourses_FullMethodName    = "/protos.UserCourseService/ListUserCourses"
)

// UserCourseServiceClient is the client API for UserCourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCourseServiceClient interface {
	EnrollUserInCourse(ctx context.Context, in *UserCourseCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetUserCourse(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserCourse, error)
	UpdateUserCourse(ctx context.Context, in *UserCourseUpdateReq, opts ...grpc.CallOption) (*Void, error)
	DeleteUserCourse(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	ListUserCourses(ctx context.Context, in *UserCourseListsReq, opts ...grpc.CallOption) (*UserCourseListsRes, error)
}

type userCourseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCourseServiceClient(cc grpc.ClientConnInterface) UserCourseServiceClient {
	return &userCourseServiceClient{cc}
}

func (c *userCourseServiceClient) EnrollUserInCourse(ctx context.Context, in *UserCourseCreateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, UserCourseService_EnrollUserInCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCourseServiceClient) GetUserCourse(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserCourse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCourse)
	err := c.cc.Invoke(ctx, UserCourseService_GetUserCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCourseServiceClient) UpdateUserCourse(ctx context.Context, in *UserCourseUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, UserCourseService_UpdateUserCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCourseServiceClient) DeleteUserCourse(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, UserCourseService_DeleteUserCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCourseServiceClient) ListUserCourses(ctx context.Context, in *UserCourseListsReq, opts ...grpc.CallOption) (*UserCourseListsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCourseListsRes)
	err := c.cc.Invoke(ctx, UserCourseService_ListUserCourses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCourseServiceServer is the server API for UserCourseService service.
// All implementations must embed UnimplementedUserCourseServiceServer
// for forward compatibility
type UserCourseServiceServer interface {
	EnrollUserInCourse(context.Context, *UserCourseCreateReq) (*Void, error)
	GetUserCourse(context.Context, *ById) (*UserCourse, error)
	UpdateUserCourse(context.Context, *UserCourseUpdateReq) (*Void, error)
	DeleteUserCourse(context.Context, *ById) (*Void, error)
	ListUserCourses(context.Context, *UserCourseListsReq) (*UserCourseListsRes, error)
	mustEmbedUnimplementedUserCourseServiceServer()
}

// UnimplementedUserCourseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserCourseServiceServer struct {
}

func (UnimplementedUserCourseServiceServer) EnrollUserInCourse(context.Context, *UserCourseCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUserInCourse not implemented")
}
func (UnimplementedUserCourseServiceServer) GetUserCourse(context.Context, *ById) (*UserCourse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCourse not implemented")
}
func (UnimplementedUserCourseServiceServer) UpdateUserCourse(context.Context, *UserCourseUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCourse not implemented")
}
func (UnimplementedUserCourseServiceServer) DeleteUserCourse(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCourse not implemented")
}
func (UnimplementedUserCourseServiceServer) ListUserCourses(context.Context, *UserCourseListsReq) (*UserCourseListsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCourses not implemented")
}
func (UnimplementedUserCourseServiceServer) mustEmbedUnimplementedUserCourseServiceServer() {}

// UnsafeUserCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCourseServiceServer will
// result in compilation errors.
type UnsafeUserCourseServiceServer interface {
	mustEmbedUnimplementedUserCourseServiceServer()
}

func RegisterUserCourseServiceServer(s grpc.ServiceRegistrar, srv UserCourseServiceServer) {
	s.RegisterService(&UserCourseService_ServiceDesc, srv)
}

func _UserCourseService_EnrollUserInCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCourseCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCourseServiceServer).EnrollUserInCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCourseService_EnrollUserInCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCourseServiceServer).EnrollUserInCourse(ctx, req.(*UserCourseCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCourseService_GetUserCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCourseServiceServer).GetUserCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCourseService_GetUserCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCourseServiceServer).GetUserCourse(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCourseService_UpdateUserCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCourseUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCourseServiceServer).UpdateUserCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCourseService_UpdateUserCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCourseServiceServer).UpdateUserCourse(ctx, req.(*UserCourseUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCourseService_DeleteUserCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCourseServiceServer).DeleteUserCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCourseService_DeleteUserCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCourseServiceServer).DeleteUserCourse(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCourseService_ListUserCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCourseListsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCourseServiceServer).ListUserCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCourseService_ListUserCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCourseServiceServer).ListUserCourses(ctx, req.(*UserCourseListsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCourseService_ServiceDesc is the grpc.ServiceDesc for UserCourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UserCourseService",
	HandlerType: (*UserCourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUserInCourse",
			Handler:    _UserCourseService_EnrollUserInCourse_Handler,
		},
		{
			MethodName: "GetUserCourse",
			Handler:    _UserCourseService_GetUserCourse_Handler,
		},
		{
			MethodName: "UpdateUserCourse",
			Handler:    _UserCourseService_UpdateUserCourse_Handler,
		},
		{
			MethodName: "DeleteUserCourse",
			Handler:    _UserCourseService_DeleteUserCourse_Handler,
		},
		{
			MethodName: "ListUserCourses",
			Handler:    _UserCourseService_ListUserCourses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "muallimah-submodule/protos/users_course.proto",
}
