// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: muallimah-submodule/protos/additional_materials.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MaterialService_CreateMaterial_FullMethodName = "/protos.MaterialService/CreateMaterial"
	MaterialService_GetMaterial_FullMethodName    = "/protos.MaterialService/GetMaterial"
	MaterialService_UpdateMaterial_FullMethodName = "/protos.MaterialService/UpdateMaterial"
	MaterialService_DeleteMaterial_FullMethodName = "/protos.MaterialService/DeleteMaterial"
	MaterialService_ListMaterials_FullMethodName  = "/protos.MaterialService/ListMaterials"
)

// MaterialServiceClient is the client API for MaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialServiceClient interface {
	CreateMaterial(ctx context.Context, in *MaterialCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetMaterial(ctx context.Context, in *ById, opts ...grpc.CallOption) (*MaterialGetRes, error)
	UpdateMaterial(ctx context.Context, in *MaterialUpdateReq, opts ...grpc.CallOption) (*Void, error)
	DeleteMaterial(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	ListMaterials(ctx context.Context, in *MaterialListReq, opts ...grpc.CallOption) (*MaterialListRes, error)
}

type materialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialServiceClient(cc grpc.ClientConnInterface) MaterialServiceClient {
	return &materialServiceClient{cc}
}

func (c *materialServiceClient) CreateMaterial(ctx context.Context, in *MaterialCreateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, MaterialService_CreateMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetMaterial(ctx context.Context, in *ById, opts ...grpc.CallOption) (*MaterialGetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialGetRes)
	err := c.cc.Invoke(ctx, MaterialService_GetMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) UpdateMaterial(ctx context.Context, in *MaterialUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, MaterialService_UpdateMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) DeleteMaterial(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, MaterialService_DeleteMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) ListMaterials(ctx context.Context, in *MaterialListReq, opts ...grpc.CallOption) (*MaterialListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialListRes)
	err := c.cc.Invoke(ctx, MaterialService_ListMaterials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialServiceServer is the server API for MaterialService service.
// All implementations must embed UnimplementedMaterialServiceServer
// for forward compatibility
type MaterialServiceServer interface {
	CreateMaterial(context.Context, *MaterialCreateReq) (*Void, error)
	GetMaterial(context.Context, *ById) (*MaterialGetRes, error)
	UpdateMaterial(context.Context, *MaterialUpdateReq) (*Void, error)
	DeleteMaterial(context.Context, *ById) (*Void, error)
	ListMaterials(context.Context, *MaterialListReq) (*MaterialListRes, error)
	mustEmbedUnimplementedMaterialServiceServer()
}

// UnimplementedMaterialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaterialServiceServer struct {
}

func (UnimplementedMaterialServiceServer) CreateMaterial(context.Context, *MaterialCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) GetMaterial(context.Context, *ById) (*MaterialGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) UpdateMaterial(context.Context, *MaterialUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) DeleteMaterial(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) ListMaterials(context.Context, *MaterialListReq) (*MaterialListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterials not implemented")
}
func (UnimplementedMaterialServiceServer) mustEmbedUnimplementedMaterialServiceServer() {}

// UnsafeMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialServiceServer will
// result in compilation errors.
type UnsafeMaterialServiceServer interface {
	mustEmbedUnimplementedMaterialServiceServer()
}

func RegisterMaterialServiceServer(s grpc.ServiceRegistrar, srv MaterialServiceServer) {
	s.RegisterService(&MaterialService_ServiceDesc, srv)
}

func _MaterialService_CreateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).CreateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_CreateMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).CreateMaterial(ctx, req.(*MaterialCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetMaterial(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_UpdateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).UpdateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_UpdateMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).UpdateMaterial(ctx, req.(*MaterialUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_DeleteMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).DeleteMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_DeleteMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).DeleteMaterial(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_ListMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).ListMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_ListMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).ListMaterials(ctx, req.(*MaterialListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialService_ServiceDesc is the grpc.ServiceDesc for MaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MaterialService",
	HandlerType: (*MaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMaterial",
			Handler:    _MaterialService_CreateMaterial_Handler,
		},
		{
			MethodName: "GetMaterial",
			Handler:    _MaterialService_GetMaterial_Handler,
		},
		{
			MethodName: "UpdateMaterial",
			Handler:    _MaterialService_UpdateMaterial_Handler,
		},
		{
			MethodName: "DeleteMaterial",
			Handler:    _MaterialService_DeleteMaterial_Handler,
		},
		{
			MethodName: "ListMaterials",
			Handler:    _MaterialService_ListMaterials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "muallimah-submodule/protos/additional_materials.proto",
}
